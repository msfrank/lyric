namespace lps1;

file_identifier "LPS1";                         // 4 byte magic for Lyric IR version 1

enum PatchsetVersion : uint8 {
    Unknown,
    Version1,
}

enum TrueFalseNil : uint8 { Nil = 0, False, True }

table TrueFalseNilValue { tfn: TrueFalseNil; }
table Int64Value        { i64: int64; }
table Float64Value      { f64: float64; }
table UInt64Value       { u64: uint64; }
table UInt32Value       { u32: uint32; }
table UInt16Value       { u16: uint16; }
table UInt8Value        { u8: uint8; }
table StringValue       { utf8: string; }

table AttrValue {
    ns: int16;                                  // address of the attribute namespace in the namespaces section
    id: uint32;                                 // the attribute id, relative to the namespace
    value: uint32;                              // address of the attribute value in the values section
}

table ElementValue {
    ns: int16;                                  // address of the element namespace in the namespaces section
    id: uint32;                                 // the element id, relative to the namespace
    children: [uint32];                         // array of element children. each element is the address of a value in the values section.
}

union Value {
    TrueFalseNilValue,
    Int64Value,
    Float64Value,
    UInt64Value,
    UInt32Value,
    UInt16Value,
    UInt8Value,
    StringValue,
    AttrValue,
    ElementValue,
}

table NamespaceDescriptor {
    ns_url: string;                             // globally-unique url of the namespace
}

table ValueDescriptor {
    value: Value;                               // tagged union containing the value
}

struct NamespaceMapping {
    ns: int16;                                  // address of the namespace in the namespaces section. must be a non-negative value.
    key: int16;                                 // cache key mapping for the namespace. must be a negative value.
}

// SyncOperation notifies the receiver of updates to the namespace cache.

table SyncOperation {
    mappings: [NamespaceMapping];
}

// AppendOperation adds the specified value (an element or literal) after the
// last child of the element specified by path. if the path does not specify
// a valid element, then the operation fails.

table AppendOperation {
    path: string;                               // '/' separated path to the element, in the format specified by RFC3986, section 3.3
    value: uint32;                              // address of value in the values section.
}

// InsertOperation puts the specified value (an element or literal) in the
// element specified by path at the array location specified by index. all
// existing children at positions equal to or greater than index are shifted
// one place to the right. if the index is equal to the size of the array,
// then the operation is equivalent to Append, and the value is placed at the
// end of the array. if the index is larger than the size of the array, then
// the operation fails. if the path does not specify a valid element, then
// the operation fails.

table InsertOperation {
    path: string;                               // '/' separated path to the element, in the format specified by RFC3986, section 3.3
    index: uint32;                              // non-negative index indicating where to place the value in the array of element children
    value: uint32;                              // address of value in the values section.
}

// UpdateOperation puts the specified value (an element or literal) into the
// specified field of the specified element. the field is identified by the given
// ns and id, and the element is identified by the given path. if there is
// a previous value in the field, then it is replaced with the value. if the
// path does not specify a valid element, then the operation fails.

table UpdateOperation {
    path: string;                               // '/' separated path to the element, in the format specified by RFC3986, section 3.3
    ns: int16;                                  // address of the field namespace in the namespaces section
    id: uint32;                                 // the field id, relative to the namespace
    value: uint32;                              // address of value in the values section.
}

// ReplaceOperation replaces the element at the specified path with the
// the specified value (an element or literal). if the path does not specify
// a valid element, then the operation fails.

table ReplaceOperation {
    path: string;                               // '/' separated path to the element, in the format specified by RFC3986, section 3.3
    value: uint32;                              // address of value in the values section.
}

// RemoveOperation deletes the element specified by path. if the path does not
// specify a valid element, then the operation fails. if the path specifies the
// root element, then the operation fails.

table RemoveOperation {
    path: string;                               // '/' separated path to the element, in the format specified by RFC3986, section 3.3
}

// EmitOperation

table EmitOperation {
    value: uint32;                              // address of value in the values section.
}

// InvokeOperation

table InvokeOperation {
    ns: int16;                                  // namespace containing the uri which identifies the call to invoke
    id: uint32;                                 // the call id, relative to the namespace
    args: [uint32];                             // array of call arguments. each element is the address of a value in the values section.
    lsn: uint32;                                // logical sequence number used to match with the AcceptOperation response
}

enum Status : uint8 {
    Unknown,
    Ok,
    Cancelled,
    InvalidArgument,
    DeadlineExceeded,
    NotFound,
    AlreadyExists,
    PermissionDenied,
    Unauthenticated,
    ResourceExhausted,
    FailedPrecondition,
    Aborted,
    Unavailable,
    OutOfRange,
    Unimplemented,
    Internal,
    DataLoss,
}

// AcceptOperation

table AcceptOperation {
    lsn: uint32;                                // logical sequence number matching the InvokeOperation
    status: Status;                             // status code indicating either success or a specific failure
    detail: string;                             // optional string containing more detail about the failure
}

union Operation {
    SyncOperation,
    AppendOperation,
    InsertOperation,
    UpdateOperation,
    ReplaceOperation,
    RemoveOperation,
    EmitOperation,
    InvokeOperation,
    AcceptOperation,
}

table ChangeDescriptor {
    id: string;                                 // change id of the operation
    operation: Operation;
}

table Patchset {
    abi: PatchsetVersion;                       // target ABI the patchset was generated for
    namespaces: [NamespaceDescriptor];          // array of namespace descriptors
    values: [ValueDescriptor];                  // array of value descriptors
    changes: [ChangeDescriptor];                // array of change descriptors
}

root_type Patchset;
